{"version":3,"sources":["components/tableCell.js","components/tableRow.js","components/table.js","App.js","index.js"],"names":["TableCell","cellData","TableRow","props","rowData","index","categories","map","category","cellIndex","data","toString","utc","Date","JSON","stringify","Table","componentDidMount","updateEndpoint","state","endpoint","fetch","then","response","json","responseData","defineTableHeaders","results","catch","console","log","headers","forEach","element","Object","keys","header","includes","push","setState","handleInputChange","event","target","value","handleSubmit","preventDefault","headerRow","rows","onSubmit","this","bind","type","onChange","row","React","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6LAGaA,EAAY,SAAC,GAAD,IACvBC,EADuB,EACvBA,SADuB,OAGvB,6BAAKA,GAAY,MCFNC,EAAW,SAACC,GACvB,IAAOC,EAA8BD,EAA9BC,QAASC,EAAqBF,EAArBE,MAAOC,EAAcH,EAAdG,WAQvB,OAAO,+BACH,6BAAuBD,GAAd,IAAMA,GACdC,EAAWC,KAAI,SAACC,EAAUC,GAAX,OAAyBL,EAAQI,GAC/C,cAAC,EAAD,CAA2CP,UAT9BS,EASkDN,EAAQI,GARvD,kBAATE,EAA0BA,EAAKC,WACtCD,EAAKE,IAAY,IAAIC,KAAKH,EAAKE,KAAKD,WACjCG,KAAKC,UAAUL,KAMFL,EAAQ,OAASI,GACjC,cAAC,EAAD,CAA2CR,SAAU,IAArCI,EAAQ,OAASI,GAVrB,IAACC,OAMHL,IC+DHW,E,kDAvEb,aAAe,IAAD,8BACZ,gBASFC,kBAAoB,WAChB,EAAKC,eAAe,EAAKC,MAAMC,WAXrB,EAcdF,eAAiB,WACfG,MAAM,EAAKF,MAAMC,UAAUE,MAAK,SAACC,GAC/BA,EAASC,OAAOF,MAAK,SAAAG,GACnB,EAAKC,mBAAmBD,EAAaE,eAEtCC,OAAM,WAAQC,QAAQC,IAAI,wBAnBjB,EAsBdJ,mBAAqB,SAAChB,GACpB,IAAIqB,EAAU,GACdrB,EAAKsB,SAAQ,SAAAC,GACXC,OAAOC,KAAKF,GAASD,SAAQ,SAAAI,GACvBL,EAAQM,SAASD,IAASL,EAAQO,KAAKF,SAG/C,EAAKG,SAAS,CAACR,UAASrB,UA7BZ,EAgCd8B,kBAAoB,SAACC,GACnB,IAAMrB,EAAWqB,EAAMC,OAAOC,MAC9B,EAAKJ,SAAS,CAACnB,cAlCH,EAqCdwB,aAAe,SAACH,GACdA,EAAMI,iBACN,EAAK3B,eAAe,EAAKC,MAAMC,WAvCnB,EA0Cd0B,UAAY,WACV,OAAO,+BACL,mCACC,EAAK3B,MAAMY,QAAQxB,KAAI,SAAA6B,GAAM,OAAI,6BAAkBA,GAATA,QAF7B,WAzChB,EAAKjB,MAAQ,CACXC,SAAU,oEACVV,KAAM,GACNqB,QAAS,GACTgB,KAAM,IANI,E,0CAiDd,WAAU,IAAD,OACP,OACE,gCACE,uBAAMC,SAAUC,KAAKL,aAAaM,KAAKD,MAAvC,UACE,8CACW,uBAAOE,KAAK,OAAOR,MAAOM,KAAK9B,MAAMC,SAAUgC,SAAUH,KAAKT,uBAEzE,uBAAOW,KAAK,SAAUR,MAAM,cAE9B,eAAC,IAAD,WACE,gCACGM,KAAKH,cAER,gCACGG,KAAK9B,MAAMT,KAAKH,KAAI,SAAC8C,EAAKhD,GAAN,OAAgB,cAAC,EAAD,CAA8BD,QAASiD,EAAKhD,MAAOA,EAAOC,WAAY,EAAKa,MAAMY,SAAlE,MAAQ1B,kB,GAhEpDiD,IAAMC,WCMXC,MARf,WACE,OACE,8BACI,cAAC,EAAD,O,MCARC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a8a6c6a0.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const TableCell = ({\r\n  cellData\r\n}) => (\r\n  <th>{cellData || ''}</th>\r\n);\r\n\r\nTableCell.propTypes = {\r\n  cellData: PropTypes.string.isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { TableCell } from './tableCell';\r\n\r\nexport const TableRow = (props) => {\r\n  const {rowData, index, categories} = props;\r\n\r\n  const parseData = (data) => {\r\n    if (typeof data !== 'object') return data.toString();\r\n    if (data.utc) return new Date(data.utc).toString();\r\n    return JSON.stringify(data);\r\n  };\r\n\r\n  return <tr key={index}>\r\n      <td key={'#' + index}>{index}</td>\r\n      {categories.map((category, cellIndex) => rowData[category] ? \r\n        <TableCell key={index + 'cell' + cellIndex}cellData={parseData(rowData[category])}/> : \r\n        <TableCell key={index + 'cell' + cellIndex}cellData={''}/>\r\n      )}\r\n  </tr>;\r\n};\r\n\r\nTableRow.propTypes = {\r\n  rowData: PropTypes.object.isRequired,\r\n  index: PropTypes.number.isRequired,\r\n  categories: PropTypes.array.isRequired\r\n};\r\n","import React from 'react';\r\nimport * as ReactBootStrap from 'react-bootstrap';\r\nimport { TableRow } from './tableRow';\r\n\r\nclass Table extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      endpoint: 'https://api.openaq.org/v1/measurements?country=GB&city=Manchester',\r\n      data: [],\r\n      headers: [],\r\n      rows: []\r\n    }\r\n  }\r\n\r\n  componentDidMount = () => {\r\n      this.updateEndpoint(this.state.endpoint);\r\n  };\r\n\r\n  updateEndpoint = () => {\r\n    fetch(this.state.endpoint).then((response) => {\r\n      response.json().then(responseData => {\r\n        this.defineTableHeaders(responseData.results);\r\n      });\r\n    }).catch(() => { console.log('Invalid Endpoint') });\r\n  };\r\n\r\n  defineTableHeaders = (data) => {\r\n    let headers = [];\r\n    data.forEach(element => {\r\n      Object.keys(element).forEach(header => {\r\n        if(!headers.includes(header)) headers.push(header);\r\n      })\r\n    });\r\n    this.setState({headers, data});\r\n  };\r\n\r\n  handleInputChange = (event) => {\r\n    const endpoint = event.target.value;\r\n    this.setState({endpoint});\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.updateEndpoint(this.state.endpoint);\r\n  };\r\n\r\n  headerRow = () => {\r\n    return <tr key={'header'}>\r\n      <td >#</td>\r\n      {this.state.headers.map(header => <td key={header}>{header}</td>)}\r\n    </tr>\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit.bind(this)}>\r\n          <label>\r\n            Endpoint:<input type=\"text\" value={this.state.endpoint} onChange={this.handleInputChange} />\r\n          </label>\r\n          <input type=\"submit\"  value=\"Submit\" />\r\n        </form>\r\n        <ReactBootStrap.Table>\r\n          <thead>\r\n            {this.headerRow()}\r\n          </thead>\r\n          <tbody>\r\n            {this.state.data.map((row, index) => <TableRow key={'row' + index} rowData={row} index={index} categories={this.state.headers} />)}\r\n          </tbody>\r\n        </ReactBootStrap.Table>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Table;","import Table from './components/table'\n\nfunction App() {\n  return (\n    <div>\n        <Table />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}